/**
 * generated by Xtext 2.9.0
 */
package mgpl.validation;

import com.google.common.base.Objects;
import java.util.Collections;
import java.util.List;
import mgpl.Common;
import mgpl.mGPL.AllDecls;
import mgpl.mGPL.AnimBlock;
import mgpl.mGPL.ArrayDecl;
import mgpl.mGPL.AssStmt;
import mgpl.mGPL.AttrAss;
import mgpl.mGPL.Complement;
import mgpl.mGPL.ElementSelect;
import mgpl.mGPL.Expr;
import mgpl.mGPL.MGPLPackage;
import mgpl.mGPL.MemberSelect;
import mgpl.mGPL.Negation;
import mgpl.mGPL.NumberLiteral;
import mgpl.mGPL.ObjDecl;
import mgpl.mGPL.ParamDecl;
import mgpl.mGPL.Prog;
import mgpl.mGPL.Touches;
import mgpl.mGPL.Var;
import mgpl.mGPL.VarDecl;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MGPLValidator extends AbstractMGPLValidator {
  /**
   * ##### Vordefinierte Hilfsfunktionen & globale Variablen.
   * ##### Verwenden Sie diese wenn möglich.
   * ##### Verwenden Sie ggf. auch die statischen Funktionen der Datei Common.xtend
   * ##### TODOs für @Check Implementierung hier weiter unten!
   */
  public boolean isUndeclared(final Var it) {
    return ((it.getId() == null) || it.getId().eIsProxy());
  }

  public boolean isArray(final Var it) {
    EObject _eContainer = it.getId().eContainer();
    return (_eContainer instanceof ArrayDecl);
  }

  public boolean isGame(final Var it) {
    AllDecls _id = it.getId();
    return (_id instanceof Prog);
  }

  public boolean isVariable(final Var it) {
    AllDecls _id = it.getId();
    return (_id instanceof VarDecl);
  }

  public boolean isObject(final Var it) {
    AllDecls _id = it.getId();
    return (_id instanceof ObjDecl);
  }

  public boolean isAnimation(final Var it) {
    AllDecls _id = it.getId();
    return (_id instanceof AnimBlock);
  }

  public boolean isParameter(final Var it) {
    AllDecls _id = it.getId();
    return (_id instanceof ParamDecl);
  }

  public boolean hasMembers(final Var it) {
    return ((this.isGame(it) || (this.isObject(it) && (!this.isArray(it)))) || this.isParameter(it));
  }

  public boolean usedAsArray(final Var it) {
    return ((it.eContainer() instanceof ElementSelect) && Objects.equal(it.eContainingFeature(), MGPLPackage.Literals.VAR__VARIABLE));
  }

  public boolean usedAsObject(final Var it) {
    EObject _eContainer = it.eContainer();
    return (_eContainer instanceof MemberSelect);
  }

  public boolean isNoGraphicalObject(final Var it) {
    boolean _or = false;
    if ((it instanceof MemberSelect)) {
      _or = true;
    } else {
      boolean _xifexpression = false;
      if ((it instanceof ElementSelect)) {
        _xifexpression = (((!this.isUndeclared(((ElementSelect)it).getVariable())) && (!this.isObject(((ElementSelect)it).getVariable()))) && this.isArray(((ElementSelect)it).getVariable()));
      } else {
        _xifexpression = (((!this.isUndeclared(it)) && ((!this.isObject(it)) || this.isArray(it))) && (!this.isParameter(it)));
      }
      _or = _xifexpression;
    }
    return _or;
  }

  public boolean isNoInt(final Var it) {
    boolean _xifexpression = false;
    if ((it instanceof MemberSelect)) {
      _xifexpression = ((MemberSelect)it).getMemberName().equals("animation_block");
    } else {
      boolean _xifexpression_1 = false;
      if ((it instanceof ElementSelect)) {
        _xifexpression_1 = (((!this.isUndeclared(((ElementSelect)it).getVariable())) && (!this.isVariable(((ElementSelect)it).getVariable()))) && this.isArray(((ElementSelect)it).getVariable()));
      } else {
        _xifexpression_1 = ((!this.isUndeclared(it)) && ((!this.isVariable(it)) || this.isArray(it)));
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }

  private final List<String> gameAttributes = Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("height", "width", "speed", "x", "y"));

  private final List<String> circleAttributes = Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("animation_block", "radius", "visible", "x", "y"));

  private final List<String> rectTriangleAttributes = Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList("animation_block", "height", "visible", "width", "x", "y"));

  public List<String> allowedAttributes(final EObject it) {
    List<String> _xifexpression = null;
    if ((it instanceof ObjDecl)) {
      List<String> _xifexpression_1 = null;
      boolean _equals = ((ObjDecl)it).getType().equals("circle");
      if (_equals) {
        _xifexpression_1 = this.circleAttributes;
      } else {
        _xifexpression_1 = this.rectTriangleAttributes;
      }
      _xifexpression = _xifexpression_1;
    } else {
      List<String> _xifexpression_2 = null;
      if ((it instanceof ParamDecl)) {
        List<String> _xifexpression_3 = null;
        boolean _equals_1 = ((ParamDecl)it).getType().equals("circle");
        if (_equals_1) {
          _xifexpression_3 = this.circleAttributes;
        } else {
          _xifexpression_3 = this.rectTriangleAttributes;
        }
        _xifexpression_2 = _xifexpression_3;
      } else {
        List<String> _xifexpression_4 = null;
        if ((it instanceof Prog)) {
          _xifexpression_4 = this.gameAttributes;
        }
        _xifexpression_2 = _xifexpression_4;
      }
      _xifexpression = _xifexpression_2;
    }
    return _xifexpression;
  }

  public String objectType(final EObject it) {
    String _xifexpression = null;
    if ((it instanceof ObjDecl)) {
      _xifexpression = Common.capitalize(((ObjDecl)it).getType());
    } else {
      String _xifexpression_1 = null;
      if ((it instanceof ParamDecl)) {
        _xifexpression_1 = Common.capitalize(((ParamDecl)it).getType());
      } else {
        String _xifexpression_2 = null;
        if ((it instanceof Prog)) {
          _xifexpression_2 = "Game";
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }

  /**
   * ##### Vordefinierte @Check Funktion als Orientierungshilfe.
   */
  @Check
  public void checkExpressionOperands(final Expr it) {
    if (((it instanceof NumberLiteral) || (it instanceof Var))) {
      return;
    }
    if ((it instanceof Touches)) {
      boolean _isNoGraphicalObject = this.isNoGraphicalObject(((Touches)it).getLeft());
      if (_isNoGraphicalObject) {
        this.error("This Operand must evaluate to a Circle, Rectangle, or Triangle", 
          MGPLPackage.Literals.TOUCHES__LEFT);
      }
      boolean _isNoGraphicalObject_1 = this.isNoGraphicalObject(((Touches)it).getRight());
      if (_isNoGraphicalObject_1) {
        this.error("This Operand must evaluate to a Circle, Rectangle, or Triangle", 
          MGPLPackage.Literals.TOUCHES__RIGHT);
      }
    } else {
      if (((it instanceof Negation) || (it instanceof Complement))) {
        final EStructuralFeature feature = it.eClass().getEStructuralFeature(MGPLPackage.Literals.NEGATION__EXPR.getName());
        final Object expr = it.eGet(feature);
        if ((expr instanceof Var)) {
          boolean _isNoInt = this.isNoInt(((Var)expr));
          if (_isNoInt) {
            this.error("This Operand must evaluate to an int", feature);
          }
        }
      } else {
        final EStructuralFeature leftFeature = it.eClass().getEStructuralFeature(MGPLPackage.Literals.EQUALS__LEFT.getName());
        final EStructuralFeature rightFeature = it.eClass().getEStructuralFeature(MGPLPackage.Literals.EQUALS__RIGHT.getName());
        final Object left = it.eGet(leftFeature);
        final Object right = it.eGet(rightFeature);
        if ((left instanceof Var)) {
          boolean _isNoInt_1 = this.isNoInt(((Var)left));
          if (_isNoInt_1) {
            this.error("This Operand must evaluate to an int", leftFeature);
          }
        }
        if ((right instanceof Var)) {
          boolean _isNoInt_2 = this.isNoInt(((Var)right));
          if (_isNoInt_2) {
            this.error("This Operand must evaluate to an int", rightFeature);
          }
        }
      }
    }
  }

  /**
   * ##### Ihre Implementierung der @Check Funktion für Aufgabe 2.
   */
  @Check
  public Object checkVar(final Var it) {
    return null;
  }

  @Check
  public Object checkAttributeAssignment(final AttrAss it) {
    return null;
  }

  @Check
  public Object checkMemberName(final MemberSelect it) {
    return null;
  }

  @Check
  public Object checkAnimation_blockAssignment(final AssStmt it) {
    return null;
  }
}
